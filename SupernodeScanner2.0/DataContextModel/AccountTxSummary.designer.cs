#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SupernodeScanner2._0.DataContextModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SupernodeScannerDB")]
	public partial class AccountTxSummaryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountTxSummary(AccountTxSummary instance);
    partial void UpdateAccountTxSummary(AccountTxSummary instance);
    partial void DeleteAccountTxSummary(AccountTxSummary instance);
    #endregion
		
		public AccountTxSummaryDataContext() : 
				base(global::SupernodeScanner2._0.Properties.Settings.Default.SupernodeScannerDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AccountTxSummaryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountTxSummaryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountTxSummaryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccountTxSummaryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountTxSummary> AccountTxSummaries
		{
			get
			{
				return this.GetTable<AccountTxSummary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTxSummary")]
	public partial class AccountTxSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MonitoredAccount;
		
		private long _OwnedByUser;
		
		private System.Nullable<System.DateTime> _DateOfInput;
		
		private string _Sender;
		
		private string _Recipient;
		
		private long _AmountIn;
		
		private long _AmountOut;
		
		private long _BalanceAfterTx;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMonitoredAccountChanging(string value);
    partial void OnMonitoredAccountChanged();
    partial void OnOwnedByUserChanging(long value);
    partial void OnOwnedByUserChanged();
    partial void OnDateOfInputChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfInputChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnRecipientChanging(string value);
    partial void OnRecipientChanged();
    partial void OnAmountInChanging(long value);
    partial void OnAmountInChanged();
    partial void OnAmountOutChanging(long value);
    partial void OnAmountOutChanged();
    partial void OnBalanceAfterTxChanging(long value);
    partial void OnBalanceAfterTxChanged();
    #endregion
		
		public AccountTxSummary()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonitoredAccount", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string MonitoredAccount
		{
			get
			{
				return this._MonitoredAccount;
			}
			set
			{
				if ((this._MonitoredAccount != value))
				{
					this.OnMonitoredAccountChanging(value);
					this.SendPropertyChanging();
					this._MonitoredAccount = value;
					this.SendPropertyChanged("MonitoredAccount");
					this.OnMonitoredAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnedByUser", DbType="BigInt NOT NULL")]
		public long OwnedByUser
		{
			get
			{
				return this._OwnedByUser;
			}
			set
			{
				if ((this._OwnedByUser != value))
				{
					this.OnOwnedByUserChanging(value);
					this.SendPropertyChanging();
					this._OwnedByUser = value;
					this.SendPropertyChanged("OwnedByUser");
					this.OnOwnedByUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfInput", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfInput
		{
			get
			{
				return this._DateOfInput;
			}
			set
			{
				if ((this._DateOfInput != value))
				{
					this.OnDateOfInputChanging(value);
					this.SendPropertyChanging();
					this._DateOfInput = value;
					this.SendPropertyChanged("DateOfInput");
					this.OnDateOfInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recipient", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Recipient
		{
			get
			{
				return this._Recipient;
			}
			set
			{
				if ((this._Recipient != value))
				{
					this.OnRecipientChanging(value);
					this.SendPropertyChanging();
					this._Recipient = value;
					this.SendPropertyChanged("Recipient");
					this.OnRecipientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountIn", DbType="BigInt NOT NULL")]
		public long AmountIn
		{
			get
			{
				return this._AmountIn;
			}
			set
			{
				if ((this._AmountIn != value))
				{
					this.OnAmountInChanging(value);
					this.SendPropertyChanging();
					this._AmountIn = value;
					this.SendPropertyChanged("AmountIn");
					this.OnAmountInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountOut", DbType="BigInt NOT NULL")]
		public long AmountOut
		{
			get
			{
				return this._AmountOut;
			}
			set
			{
				if ((this._AmountOut != value))
				{
					this.OnAmountOutChanging(value);
					this.SendPropertyChanging();
					this._AmountOut = value;
					this.SendPropertyChanged("AmountOut");
					this.OnAmountOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceAfterTx", DbType="BigInt NOT NULL")]
		public long BalanceAfterTx
		{
			get
			{
				return this._BalanceAfterTx;
			}
			set
			{
				if ((this._BalanceAfterTx != value))
				{
					this.OnBalanceAfterTxChanging(value);
					this.SendPropertyChanging();
					this._BalanceAfterTx = value;
					this.SendPropertyChanged("BalanceAfterTx");
					this.OnBalanceAfterTxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
